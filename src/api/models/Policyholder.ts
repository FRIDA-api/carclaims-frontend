/* tslint:disable */
/* eslint-disable */
/**
 * FRIDA Car Claims Data Schema
 * Die FRIDA Schaden API - ermöglicht es Nutzer:innen im Schadenfall die wichtigsten Versicherungs- und Unfalldaten über eine Schadenplattform direkt an den Versicherer zu übertragen und den Schaden damit offiziel zu melden.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: floneuss99@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Person } from './Person';
import {
    PersonFromJSON,
    PersonFromJSONTyped,
    PersonToJSON,
} from './Person';

/**
 * Holds all information of a `Policyholder`.
 * @export
 * @interface Policyholder
 */
export interface Policyholder {
    /**
     * 
     * @type {Person}
     * @memberof Policyholder
     */
    personalInformation?: Person;
    /**
     * Vorsteuerabzug ja/nein
     * @type {string}
     * @memberof Policyholder
     */
    inputTaxDeduction?: PolicyholderInputTaxDeductionEnum;
    /**
     * Fahrzeugmarke || will be extracted from <Policy Pass>
     * @type {string}
     * @memberof Policyholder
     */
    vehicleMake?: string;
    /**
     * Fahrzeugmodell || will be extracted from <Policy Pass>
     * @type {string}
     * @memberof Policyholder
     */
    vehicleType?: string;
    /**
     * Kennzeichen ||will be extracted from <Policy Pass>
     * @type {string}
     * @memberof Policyholder
     */
    vehicleReg?: string;
    /**
     * Versicherungsanbieter || will be extracted from <Companion Pass>
     * @type {string}
     * @memberof Policyholder
     */
    insuranceCompany?: string;
    /**
     * Policennummer || will be extracted from <Policy Pass>
     * @type {string}
     * @memberof Policyholder
     */
    policyNumber?: string;
    /**
     * Fahrzeug-Identifizierungsnummer || will be extracted from <Policy Pass>
     * @type {string}
     * @memberof Policyholder
     */
    vin?: string;
    /**
     * aktueller Kilometerstand
     * @type {number}
     * @memberof Policyholder
     */
    currentMileage?: number;
    /**
     * Grüne-Karte Nummer
     * @type {string}
     * @memberof Policyholder
     */
    greencardNumber?: string;
    /**
     * Ablaufdatum der Grünen Karte
     * @type {Date}
     * @memberof Policyholder
     */
    greencardExpirydate?: Date;
    /**
     * Vollkaskoversichert ja/nein
     * @type {string}
     * @memberof Policyholder
     */
    comprehensiveInsurance?: PolicyholderComprehensiveInsuranceEnum;
}


/**
 * @export
 */
export const PolicyholderInputTaxDeductionEnum = {
    NotSpecified: 'not_specified',
    False: 'false',
    True: 'true'
} as const;
export type PolicyholderInputTaxDeductionEnum = typeof PolicyholderInputTaxDeductionEnum[keyof typeof PolicyholderInputTaxDeductionEnum];

/**
 * @export
 */
export const PolicyholderComprehensiveInsuranceEnum = {
    NotSpecified: 'not_specified',
    False: 'false',
    True: 'true'
} as const;
export type PolicyholderComprehensiveInsuranceEnum = typeof PolicyholderComprehensiveInsuranceEnum[keyof typeof PolicyholderComprehensiveInsuranceEnum];


/**
 * Check if a given object implements the Policyholder interface.
 */
export function instanceOfPolicyholder(value: object): value is Policyholder {
    return true;
}

export function PolicyholderFromJSON(json: any): Policyholder {
    return PolicyholderFromJSONTyped(json, false);
}

export function PolicyholderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Policyholder {
    if (json == null) {
        return json;
    }
    return {
        
        'personalInformation': json['personalInformation'] == null ? undefined : PersonFromJSON(json['personalInformation']),
        'inputTaxDeduction': json['inputTaxDeduction'] == null ? undefined : json['inputTaxDeduction'],
        'vehicleMake': json['vehicleMake'] == null ? undefined : json['vehicleMake'],
        'vehicleType': json['vehicleType'] == null ? undefined : json['vehicleType'],
        'vehicleReg': json['vehicleReg'] == null ? undefined : json['vehicleReg'],
        'insuranceCompany': json['insuranceCompany'] == null ? undefined : json['insuranceCompany'],
        'policyNumber': json['policyNumber'] == null ? undefined : json['policyNumber'],
        'vin': json['vin'] == null ? undefined : json['vin'],
        'currentMileage': json['currentMileage'] == null ? undefined : json['currentMileage'],
        'greencardNumber': json['greencardNumber'] == null ? undefined : json['greencardNumber'],
        'greencardExpirydate': json['greencardExpirydate'] == null ? undefined : (new Date(json['greencardExpirydate'])),
        'comprehensiveInsurance': json['comprehensiveInsurance'] == null ? undefined : json['comprehensiveInsurance'],
    };
}

export function PolicyholderToJSON(value?: Policyholder | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'personalInformation': PersonToJSON(value['personalInformation']),
        'inputTaxDeduction': value['inputTaxDeduction'],
        'vehicleMake': value['vehicleMake'],
        'vehicleType': value['vehicleType'],
        'vehicleReg': value['vehicleReg'],
        'insuranceCompany': value['insuranceCompany'],
        'policyNumber': value['policyNumber'],
        'vin': value['vin'],
        'currentMileage': value['currentMileage'],
        'greencardNumber': value['greencardNumber'],
        'greencardExpirydate': value['greencardExpirydate'] == null ? undefined : ((value['greencardExpirydate']).toISOString().substring(0,10)),
        'comprehensiveInsurance': value['comprehensiveInsurance'],
    };
}

