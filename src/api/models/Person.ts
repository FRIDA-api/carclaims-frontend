/* tslint:disable */
/* eslint-disable */
/**
 * FRIDA Car Claims Data Schema
 * Die FRIDA Schaden API - ermöglicht es Nutzer:innen im Schadenfall die wichtigsten Versicherungs- und Unfalldaten über eine Schadenplattform direkt an den Versicherer zu übertragen und den Schaden damit offiziel zu melden.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: floneuss99@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Holds all information of a Person who could either be a `Witness`, or a part of a `Policyholder` or `Vehicle Driver`.
 * @export
 * @interface Person
 */
export interface Person {
    /**
     * Anrede
     * @type {string}
     * @memberof Person
     */
    formOfAddress?: PersonFormOfAddressEnum;
    /**
     * Titel
     * @type {string}
     * @memberof Person
     */
    title?: PersonTitleEnum;
    /**
     * Nachname
     * @type {string}
     * @memberof Person
     */
    lastName?: string;
    /**
     * Vorname
     * @type {string}
     * @memberof Person
     */
    firstName?: string;
    /**
     * PLZ
     * @type {string}
     * @memberof Person
     */
    postalCode?: string;
    /**
     * Ort
     * @type {string}
     * @memberof Person
     */
    city?: string;
    /**
     * Straße
     * @type {string}
     * @memberof Person
     */
    streetName?: string;
    /**
     * Hausnummer
     * @type {string}
     * @memberof Person
     */
    streetNumber?: string;
    /**
     * Telefonnummer
     * @type {string}
     * @memberof Person
     */
    phoneNumber?: string;
    /**
     * E-Mail Adresse
     * @type {string}
     * @memberof Person
     */
    emailAddress?: string;
}


/**
 * @export
 */
export const PersonFormOfAddressEnum = {
    NoAddress: 'no_address',
    Herr: 'Herr',
    Frau: 'Frau'
} as const;
export type PersonFormOfAddressEnum = typeof PersonFormOfAddressEnum[keyof typeof PersonFormOfAddressEnum];

/**
 * @export
 */
export const PersonTitleEnum = {
    Dr: 'Dr.',
    DrDr: 'Dr. Dr.',
    Prof: 'Prof.'
} as const;
export type PersonTitleEnum = typeof PersonTitleEnum[keyof typeof PersonTitleEnum];


/**
 * Check if a given object implements the Person interface.
 */
export function instanceOfPerson(value: object): value is Person {
    return true;
}

export function PersonFromJSON(json: any): Person {
    return PersonFromJSONTyped(json, false);
}

export function PersonFromJSONTyped(json: any, ignoreDiscriminator: boolean): Person {
    if (json == null) {
        return json;
    }
    return {
        
        'formOfAddress': json['formOfAddress'] == null ? undefined : json['formOfAddress'],
        'title': json['title'] == null ? undefined : json['title'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'postalCode': json['postalCode'] == null ? undefined : json['postalCode'],
        'city': json['city'] == null ? undefined : json['city'],
        'streetName': json['streetName'] == null ? undefined : json['streetName'],
        'streetNumber': json['streetNumber'] == null ? undefined : json['streetNumber'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'emailAddress': json['emailAddress'] == null ? undefined : json['emailAddress'],
    };
}

export function PersonToJSON(value?: Person | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'formOfAddress': value['formOfAddress'],
        'title': value['title'],
        'lastName': value['lastName'],
        'firstName': value['firstName'],
        'postalCode': value['postalCode'],
        'city': value['city'],
        'streetName': value['streetName'],
        'streetNumber': value['streetNumber'],
        'phoneNumber': value['phoneNumber'],
        'emailAddress': value['emailAddress'],
    };
}

