/* tslint:disable */
/* eslint-disable */
/**
 * FRIDA Car Claims Data Schema
 * Die FRIDA Schaden API - ermöglicht es Nutzer:innen im Schadenfall die wichtigsten Versicherungs- und Unfalldaten über eine Schadenplattform direkt an den Versicherer zu übertragen und den Schaden damit offiziel zu melden.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: floneuss99@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Claimsdata,
  ErrorList,
} from '../models/index';
import {
    ClaimsdataFromJSON,
    ClaimsdataToJSON,
    ErrorListFromJSON,
    ErrorListToJSON,
} from '../models/index';

export interface CreateClaimByPIDRequest {
    policyNumber: string;
    claimsdata?: Claimsdata;
}

export interface GetClaimByPIDRequest {
    policyNumber: string;
}

export interface UpdateClaimByPIDRequest {
    policyNumber: string;
    claimsdata?: Claimsdata;
}

/**
 * 
 */
export class ClaimsApi extends runtime.BaseAPI {

    /**
     * Create Claim by PID
     * Create Claim by PID
     */
    async createClaimByPIDRaw(requestParameters: CreateClaimByPIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Claimsdata>> {
        if (requestParameters['policyNumber'] == null) {
            throw new runtime.RequiredError(
                'policyNumber',
                'Required parameter "policyNumber" was null or undefined when calling createClaimByPID().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/claimsdata/{policyNumber}`.replace(`{${"policyNumber"}}`, encodeURIComponent(String(requestParameters['policyNumber']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClaimsdataToJSON(requestParameters['claimsdata']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimsdataFromJSON(jsonValue));
    }

    /**
     * Create Claim by PID
     * Create Claim by PID
     */
    async createClaimByPID(requestParameters: CreateClaimByPIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Claimsdata> {
        const response = await this.createClaimByPIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Claim by PID
     * Get Claim by PID
     */
    async getClaimByPIDRaw(requestParameters: GetClaimByPIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Claimsdata>> {
        if (requestParameters['policyNumber'] == null) {
            throw new runtime.RequiredError(
                'policyNumber',
                'Required parameter "policyNumber" was null or undefined when calling getClaimByPID().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/claimsdata/{policyNumber}`.replace(`{${"policyNumber"}}`, encodeURIComponent(String(requestParameters['policyNumber']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimsdataFromJSON(jsonValue));
    }

    /**
     * Get Claim by PID
     * Get Claim by PID
     */
    async getClaimByPID(requestParameters: GetClaimByPIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Claimsdata> {
        const response = await this.getClaimByPIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Claim by PID
     * Update Claim by PID
     */
    async updateClaimByPIDRaw(requestParameters: UpdateClaimByPIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Claimsdata>> {
        if (requestParameters['policyNumber'] == null) {
            throw new runtime.RequiredError(
                'policyNumber',
                'Required parameter "policyNumber" was null or undefined when calling updateClaimByPID().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/claimsdata/{policyNumber}`.replace(`{${"policyNumber"}}`, encodeURIComponent(String(requestParameters['policyNumber']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClaimsdataToJSON(requestParameters['claimsdata']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimsdataFromJSON(jsonValue));
    }

    /**
     * Update Claim by PID
     * Update Claim by PID
     */
    async updateClaimByPID(requestParameters: UpdateClaimByPIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Claimsdata> {
        const response = await this.updateClaimByPIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
